function testAngularMomentumConstraint()
  test_cases = struct('urdf', ...
    { ...
     [getDrakePath, '/examples/Atlas/urdf/atlas_minimal_contact.urdf'], ...
     [getDrakePath, '/systems/plants/test/FallingBrick.urdf'], ...
     [getDrakePath, '/examples/Acrobot/Acrobot.urdf'], ...
     [getDrakePath, '/examples/Pendulum/Pendulum.urdf']}, ...
    'floating', { ...
      true, ...
      true, ...
      false, ...
      false ...
       });
  for test_case = test_cases
    options.floating = test_case.floating;
    %options.floating = false;
    w = warning('off','Drake:RigidBodyManipulator:UnsupportedJointLimits');
    warning('off','Drake:RigidBodyManipulator:UnsupportedVelocityLimits');
    warning('off','Drake:RigidBodyManipulator:NonPSDInertia');
    warning('off','Drake:RigidBodyManipulator:ReplacedCylinder');
    warning('off','Drake:RigidBodyManipulator:UnsupportedContactPoints');
    r = RigidBodyManipulator(test_case.urdf,options);
    warning(w);
    nT = 5;
    nq = r.getNumDOF();
    nv = r.getNumDOF();
    nx = (nq+nv)*nT;
    x = rand(nx,1);
    t = linspace(0,1,nT);
    constraint = AngularMomentumConstraint(r,t);
    [c,dc] = geval(@constraint.eval,x,struct('grad_method',{{'user','taylorvar'}}));
    %[c,dc] = geval(@constraint.eval,x, ...
                   %struct('grad_method',{{'user','numerical'}},'tol',1e-6));
  end
end

